from solution import shortestRoute, Point


def test_basic():
    input_str = (
        "(1,-5,7,0);(1,-3,12,4);(1,0,8,2);(1,4,4,10)\n"
        "(1,-9,2,3);(1,-4,0,0);(1,-1,1,2)\n"
        "(1,-3,-5,5);(1,-1,-3,7);(0,4,-4,12);(1,8,-2,4);(1,10,-1, 3)\n"
        "(1,-6,-7,2);(1,-1,-8,1);(1,3,-12,5);(1,9,-8,7)\n"
        "(1,-5,-15,1);(1,-6,-16,8);(1,4,-15,1);(1,5,-17,2);(1,6,-15,9);(1,8,-15,7)"
    )

    result = shortestRoute(input_str)

    assert result[0] == 29.31950310838147

    assert result[1] == [
        Point(active=1, x=-5, y=7, z=0),
        Point(active=1, x=-9, y=2, z=3),
        Point(active=1, x=-3, y=-5, z=5),
        Point(active=1, x=-6, y=-7, z=2),
        Point(active=1, x=-5, y=-15, z=1)
    ]


def test_modified_espresso_group():
    input_str = (
        "(1,-5,7,0);(1,-3,12,4);(1,0,8,2);(1,4,4,10);(1,-5,6,0)\n"
        "(1,-9,2,3);(0,-4,0,0);(1,-1,1,2)\n"
        "(1,-3,-5,5);(1,-1,-3,7);(0,4,-4,12);(1,8,-2,4);(1,10,-1, 3)\n"
        "(1,-6,-7,2);(1,-1,-8,1);(1,3,-12,5);(1,9,-8,7)\n"
        "(1,-5,-15,1);(1,-6,-16,8);(1,4,-15,1);(1,5,-17,2);(1,6,-15,9);(1,8,-15,7)"
    )

    result = shortestRoute(input_str)

    assert result[0] == 28.65155953394884

    assert result[1] == [
        Point(active=1, x=-5, y=6, z=0),
        Point(active=1, x=-9, y=2, z=3),
        Point(active=1, x=-3, y=-5, z=5),
        Point(active=1, x=-6, y=-7, z=2),
        Point(active=1, x=-5, y=-15, z=1)
    ]


def test_out_of_order():
    input_str = (
        "(1,-5,7,0);(0,-3,12,4);(0,0,8,2);(1,4,4,10)\n"
        "(1,-9,2,3);(0,-4,0,0);(1,-1,1,2)\n"
        "(1,-3,-5,5);(0,-1,-3,7);(0,4,-4,12);(1,8,-2,4);(0,10,-1, 3)\n"
        "(1,-6,-7,2);(1,-1,-8,1);(0,3,-12,5);(0,9,-8,7)\n"
        "(1,-5,-15,1);(0,-6,-16,8);(1,4,-15,1);(0,5,-17,2);(1,6,-15,9);(0,8,-15,7)"
    )

    result = shortestRoute(input_str)

    assert result[0] == 29.31950310838147

    assert result[1] == [
        Point(active=1, x=-5, y=7, z=0),
        Point(active=1, x=-9, y=2, z=3),
        Point(active=1, x=-3, y=-5, z=5),
        Point(active=1, x=-6, y=-7, z=2),
        Point(active=1, x=-5, y=-15, z=1)
    ]


def test_single_path():
    input_str = (
        "(0,-5,7,0);(0,-3,12,4);(1,0,8,2);(0,4,4,10)\n"
        "(1,-9,2,3);(0,-4,0,0);(0,-1,1,2)\n"
        "(0,-3,-5,5);(1,-1,-3,7);(0,4,-4,12);(0,8,-2,4);(0,10,-1, 3)\n"
        "(1,-6,-7,2);(0,-1,-8,1);(0,3,-12,5);(0,9,-8,7)\n"
        "(0,-5,-15,1);(1,-6,-16,8);(0,4,-15,1);(0,5,-17,2);(0,6,-15,9);(0,8,-15,7)"
    )

    result = shortestRoute(input_str)

    assert result[0] == 40.05042348818775

    assert result[1] == [
        Point(active=1, x=0, y=8, z=2),
        Point(active=1, x=-9, y=2, z=3),
        Point(active=1, x=-1, y=-3, z=7),
        Point(active=1, x=-6, y=-7, z=2),
        Point(active=1, x=-6, y=-16, z=8),
    ]

